import streamlit as st
import pandas as pd
import numpy as np
import joblib
from datetime import datetime
from fpdf import FPDF
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import os

# -------------------------------------
# PAGE CONFIGURATION
# -------------------------------------
st.set_page_config(page_title="AI Fraud Detection ‚Äì Kareem Morad", layout="wide")
st.title("üíº AI-Powered Fraud Detection Dashboard")

# -------------------------------------
# DARK MODE & CUSTOM BACKGROUND
# -------------------------------------
dark_mode = st.sidebar.toggle("üåô Dark Mode", value=False)

if dark_mode:
    st.markdown("""
        <style>
        body {
            background-color: #0e1117 !important;
            color: #ffffff !important;
            background-image: none !important;
        }
        .stTextInput, .stNumberInput, .stSelectbox, .stDataFrame, .stTextArea {
            color: white !important;
        }
        .stMarkdown, div, span, section {
            color: #ffffff !important;
        }
        </style>
    """, unsafe_allow_html=True)
else:
    st.markdown("""
        <style>
        body {
            background-image: url("https://images.unsplash.com/photo-1581092334783-f4476c2145ab?fit=crop&w=1600&q=80");
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
        }
        html, body, [class*="css"] {
            font-family: 'Segoe UI', sans-serif;
            scroll-behavior: smooth;
        }
        input:hover, select:hover, textarea:hover {
            background-color: #f0f8ff !important;
            transition: 0.3s ease;
        }
        .stButton>button {
            color: white !important;
            background-color: #2b7de9 !important;
            border-radius: 6px !important;
            transition: background-color 0.3s ease !important;
        }
        .stButton>button:hover {
            background-color: #1e63c4 !important;
        }
        </style>
    """, unsafe_allow_html=True)

# -------------------------------------
# UPLOAD MODEL (.pkl)
# -------------------------------------
uploaded_model = st.sidebar.file_uploader("üì§ Upload Trained Model (.pkl)", type="pkl")
model = None
if uploaded_model:
    with open("xgb_model.pkl", "wb") as f:
        f.write(uploaded_model.read())
    model = joblib.load("xgb_model.pkl")
    st.sidebar.success("‚úÖ Model uploaded successfully.")

# -------------------------------------

# -------------------------------------
# SESSION STATE
# -------------------------------------
if "predicted_transactions" not in st.session_state:
    st.session_state.predicted_transactions = []

# -------------------------------------
# PDF REPORT GENERATOR
# -------------------------------------
def generate_pdf_report(df):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.set_title("Fraud Detection Report ‚Äì Kareem Morad")

    pdf.cell(200, 10, txt="üìÑ Fraud Detection Report", ln=True, align='C')
    pdf.ln(10)

    total = len(df)
    frauds = df[df["Prediction"].str.contains("FRAUD")]
    fraud_count = len(frauds)

    pdf.cell(200, 10, txt=f"Total Transactions: {total}", ln=True)
    pdf.cell(200, 10, txt=f"Fraudulent Transactions: {fraud_count}", ln=True)
    pdf.ln(5)
    pdf.set_font("Arial", size=10)

    for _, row in frauds.iterrows():
        line = f"{row['Timestamp']} | {row['Type']} | {row['Amount']} | FRAUD"
        pdf.cell(200, 8, txt=line, ln=True)

    pdf.cell(200, 10, txt="Generated by Kareem Morad", ln=True, align='C')
    pdf.output("fraud_report.pdf")

# -------------------------------------
# NAVIGATION
# -------------------------------------
# -------------------------------------
# HANDLE DATASET UPLOAD
# -------------------------------------
uploaded_csv_path = None
csv_file = st.sidebar.file_uploader("üìÇ Upload Dataset (.csv)", type="csv", key="csv_uploader")

if csv_file is not None:
    with open("uploaded_data.csv", "wb") as f:
        f.write(csv_file.read())
    uploaded_csv_path = "uploaded_data.csv"
    st.sidebar.success("‚úÖ Dataset uploaded successfully.")

section = st.sidebar.radio("Go to", ["üè† Overview", "üîç Predict", "üì¨ Upload & Monitor", "üìÅ All Logs", "üìä Reports"])

# -------------------------------------
# OVERVIEW
# -------------------------------------
if section == "üè† Overview":
    st.subheader("üìÑ Project Overview")
    st.write("""
    This dashboard showcases an AI-powered fraud detection model built and trained by Kareem Morad.

    üí° Features:
    - Real-time transaction classification
    - Uploadable Model (.pkl) & Dataset (.csv)
    - Exportable fraud reports (PDF + CSV)
    - Permanent log saving
    - Full fraud analytics and performance reports
    """)

# -------------------------------------
# PREDICT
# -------------------------------------
elif section == "üîç Predict":
    st.subheader("‚ö° Real-Time Transaction Prediction")
    if model:
        amount = st.number_input("Transaction Amount", value=5000.0)
        tx_type = st.selectbox("Transaction Type", ["TRANSFER", "CASH_OUT", "PAYMENT", "CASH_IN", "DEBIT"])
        old_balance = st.number_input("Old Balance", value=10000.0)
        new_balance = st.number_input("New Balance", value=500.0)

        if st.button("üîç Predict"):
            try:
                type_map = {"TRANSFER": 0, "CASH_OUT": 1, "PAYMENT": 2, "CASH_IN": 3, "DEBIT": 4}
                input_data = pd.DataFrame([[
                    type_map[tx_type], amount, old_balance, new_balance,
                    old_balance - amount, new_balance + amount,
                    int(old_balance == 0), int(new_balance == 0)
                ]], columns=[
                    "type", "amount", "oldbalanceOrg", "newbalanceOrig",
                    "diffOrig", "estNewDest", "flagOldZero", "flagNewZero"
                ])
                prediction = model.predict(input_data)[0]
                result = "FRAUDULENT ‚ùå" if prediction == 1 else "LEGIT ‚úÖ"
                st.success(f"Prediction: {result}")

                record = {
                    "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "Amount": amount,
                    "Type": tx_type,
                    "Old Balance": old_balance,
                    "New Balance": new_balance,
                    "Prediction": result
                }
                st.session_state.predicted_transactions.append(record)

                try:
                    log_df = pd.DataFrame([record])
                    log_df.to_csv("permanent_log.csv", mode='a', header=not os.path.exists("permanent_log.csv"), index=False)
                except Exception:
                    pass

            except Exception as e:
                st.error(f"Prediction failed: {e}")
    else:
        st.warning("‚ö†Ô∏è Please upload a trained model to start predictions.")

# -------------------------------------
# MONITOR TAB
# -------------------------------------
elif section == "üì¨ Upload & Monitor":
    st.subheader("üì¨ Monitored Transactions")
    if st.session_state.predicted_transactions:
        df_logs = pd.DataFrame(st.session_state.predicted_transactions)
        st.dataframe(df_logs)

        csv = df_logs.to_csv(index=False).encode("utf-8")
        st.download_button("‚¨áÔ∏è Download CSV Report", csv, "fraud_report.csv", "text/csv")

        if st.button("üìÑ Generate PDF Fraud Report"):
            generate_pdf_report(df_logs)
            with open("fraud_report.pdf", "rb") as file:
                st.download_button("‚¨áÔ∏è Download PDF", file.read(), file_name="fraud_report.pdf", mime="application/pdf")
    else:
        st.info("No transactions have been predicted yet.")

# -------------------------------------
# PERMANENT LOGS
# -------------------------------------
elif section == "üìÅ All Logs":
    st.subheader("üìÅ Permanent Log ‚Äì All Transactions")
    try:
        full_logs = pd.read_csv("permanent_log.csv")
        st.dataframe(full_logs)
        st.download_button("‚¨áÔ∏è Download All Logs", full_logs.to_csv(index=False), file_name="permanent_log.csv", mime="text/csv")
    except FileNotFoundError:
        st.info("No permanent log file found yet.")

# -------------------------------------
# -------------------------------------
# REPORTS TAB
# -------------------------------------
elif section == "üìä Reports":
    st.subheader("üìä Model Evaluation & Fraud Insights")

    # Ensure both model and dataset are uploaded
    if not model or "uploaded_csv_path" not in st.session_state:
        st.error("‚ùå Model or dataset not found. Please upload both a .pkl and a .csv file to view analytics.")
        st.stop()

    uploaded_csv_path = st.session_state["uploaded_csv_path"]

    try:
        df_full = pd.read_csv(uploaded_csv_path)

        # Optional filtering if the dataset contains these types
        if "type" in df_full.columns:
            df_full = df_full[df_full["type"].isin(["TRANSFER", "CASH_OUT"])]
            df_full["type"] = df_full["type"].map({"TRANSFER": 0, "CASH_OUT": 1})

        # Drop columns if they exist
        drop_cols = ["nameOrig", "nameDest", "isFlaggedFraud", "step"]
        df_full = df_full.drop(columns=[col for col in drop_cols if col in df_full.columns], errors="ignore")

        # Confirm required columns exist
        features = ['type', 'amount', 'oldbalanceOrg', 'newbalanceOrig', 'oldbalanceDest', 'newbalanceDest']
        if not all(col in df_full.columns for col in features + ['isFraud']):
            st.warning("‚ö†Ô∏è Dataset is missing one or more required columns.")
            st.stop()

        X = df_full[features]
        y = df_full['isFraud']
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        y_pred = model.predict(X_test)

        # Confusion Matrix
        st.markdown("### üìå Confusion Matrix")
        cm = confusion_matrix(y_test, y_pred)
        fig, ax = plt.subplots()
        sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Legit", "Fraud"], yticklabels=["Legit", "Fraud"])
        st.pyplot(fig)

        # Classification Report
        st.markdown("### üìÑ Classification Report")
        report_df = pd.DataFrame(classification_report(y_test, y_pred, output_dict=True)).transpose()
        st.dataframe(report_df)

        # Correlation Heatmap
        st.markdown("### üî• Feature Correlation")
        fig2, ax2 = plt.subplots(figsize=(10, 6))
        sns.heatmap(df_full.corr(), annot=True, cmap="coolwarm", fmt=".2f", ax=ax2)
        st.pyplot(fig2)

        # Amount Distribution
        st.markdown("### üìà Transaction Amount Distribution")
        fig3, ax3 = plt.subplots(figsize=(10, 5))
        sns.histplot(df_full[df_full['isFraud'] == 0]['amount'], bins=60, color='green', label='Legit', ax=ax3)
        sns.histplot(df_full[df_full['isFraud'] == 1]['amount'], bins=60, color='red', label='Fraud', ax=ax3)
        ax3.set_xlim(0, 200000)
        ax3.set_title("Fraud vs Legit Transactions")
        ax3.legend()
        st.pyplot(fig3)

        # Balance Difference
        st.markdown("### üìâ Balance Drop (Fraud vs Legit)")
        df_full["balanceDiff"] = df_full["oldbalanceOrg"] - df_full["newbalanceOrig"]
        fig4, ax4 = plt.subplots()
        sns.boxplot(x="isFraud", y="balanceDiff", data=df_full, palette=["green", "red"], ax=ax4)
        ax4.set_title("Balance Difference Boxplot")
        st.pyplot(fig4)

    except Exception as e:
        st.warning("‚ö†Ô∏è Unable to generate analytics.")
        st.text(str(e))


