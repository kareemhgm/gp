# ---------------------------- Imports ----------------------------
import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
from datetime import datetime
from fpdf import FPDF
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

# ---------------------------- Page Configuration ----------------------------
st.set_page_config(page_title="AI Fraud Detection ‚Äì Kareem Morad", layout="wide")

# ---------------------------- Custom CSS Styling ----------------------------
st.markdown("""
<style>
body, .main {
    background: radial-gradient(circle at top left, #0a0f1f, #000000) no-repeat center center fixed;
    background-size: cover;
    color: white;
}
h1, h2, h3, .stMarkdown, .stTitle, .stHeader {
    color: #6cc3ff !important;
    text-shadow: 0 0 10px #6cc3ff;
}
section[data-testid="stSidebar"] {
    background-color: #0d1117 !important;
    border-right: 1px solid #333;
    color: white;
}
.stButton>button {
    background-color: #0f62fe;
    color: white;
    border: none;
    border-radius: 8px;
    box-shadow: 0 0 8px #6cc3ff;
}
.stButton>button:hover {
    background-color: #0043ce;
    box-shadow: 0 0 12px #6cc3ff;
    transform: scale(1.02);
}
.stSelectbox, .stNumberInput, .stTextInput, .stTextArea {
    background-color: #1c1f26 !important;
    color: white !important;
    border: 1px solid #333;
    border-radius: 6px;
}
.stDataFrame, .stAlert, .stFileUploader {
    background-color: rgba(18, 20, 26, 0.85);
    border-radius: 12px;
    padding: 10px;
    color: white !important;
}
footer, header {
    visibility: hidden;
}
</style>
""", unsafe_allow_html=True)

# ---------------------------- Upload Model ----------------------------
uploaded_model = st.sidebar.file_uploader("üì§ Upload Trained Model (.pkl)", type="pkl")
model = None
if uploaded_model:
    with open("xgb_model.pkl", "wb") as f:
        f.write(uploaded_model.read())
    model = joblib.load("xgb_model.pkl")
    st.session_state["model"] = model
    st.sidebar.success("‚úÖ Model uploaded successfully.")

# ---------------------------- Upload Dataset ----------------------------
uploaded_dataset = st.sidebar.file_uploader("üì§ Upload Dataset (.csv)", type="csv", key="csv")
if uploaded_dataset:
    with open("uploaded_data.csv", "wb") as f:
        f.write(uploaded_dataset.read())
    st.session_state["uploaded_csv_path"] = "uploaded_data.csv"
    st.sidebar.success("‚úÖ Dataset uploaded successfully.")

# ---------------------------- Initialize Session ----------------------------
if "predicted_transactions" not in st.session_state:
    st.session_state.predicted_transactions = []

# ---------------------------- PDF Report Generator ----------------------------
def generate_pdf_report(df):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.set_title("Fraud Detection Report ‚Äì Kareem Morad")
    pdf.cell(200, 10, txt="Fraud Detection Report", ln=True, align='C')
    pdf.ln(10)

    total = len(df)
    fraud_count = len(df[df["Prediction"].str.contains("FRAUD")])
    pdf.cell(200, 10, txt=f"Total Transactions: {total}", ln=True)
    pdf.cell(200, 10, txt=f"Fraudulent Transactions: {fraud_count}", ln=True)
    pdf.ln(5)
    pdf.set_font("Arial", size=10)

    for _, row in df.iterrows():
        line = f"{row['Timestamp']} | {row['Type']} | {row['Amount']} | {row['Prediction']}"
        pdf.cell(200, 8, txt=line.encode('latin-1', 'replace').decode('latin-1'), ln=True)

    pdf.cell(200, 10, txt="Generated by Kareem Morad", ln=True, align='C')
    pdf.output("fraud_report.pdf")

# ---------------------------- Navigation ----------------------------
section = st.sidebar.radio("Go to", ["üè† Overview", "üîç Predict", "üì¨ Upload & Monitor", "üìÅ All Logs", "üìä Reports"])

# ---------------------------- Overview Page ----------------------------
if section == "üè† Overview":
    st.subheader("üìÑ Project Overview")
    st.write("""
    This dashboard showcases an AI-powered fraud detection model built and trained by Kareem Morad.

    üí° Features:
    - Uploadable model (.pkl) & dataset (.csv)
    - Real-time fraud prediction
    - Exportable reports (PDF + CSV)
    - Full fraud analytics and correlation visuals
    """)

# ---------------------------- Predict Page ----------------------------
elif section == "üîç Predict":
    st.subheader("‚ö° Real-Time Transaction Prediction")

    if model:
        amount = st.number_input("Transaction Amount", value=5000.0)
        tx_type = st.selectbox("Transaction Type", ["TRANSFER", "CASH_OUT", "PAYMENT", "CASH_IN", "DEBIT"])
        old_balance = st.number_input("Old Balance (Origin)", value=10000.0)
        new_balance = st.number_input("New Balance (Origin)", value=500.0)

        diff_orig = old_balance - amount
        est_new_dest = new_balance + amount
        flag_old_zero = int(old_balance == 0)
        flag_new_zero = int(new_balance == 0)

        if st.button("üîç Predict"):
            try:
                type_map = {"TRANSFER": 0, "CASH_OUT": 1, "PAYMENT": 2, "CASH_IN": 3, "DEBIT": 4}
                input_data = pd.DataFrame([[
                    type_map[tx_type], amount, old_balance, new_balance,
                    diff_orig, est_new_dest, flag_old_zero, flag_new_zero
                ]], columns=[
                    'type', 'amount', 'oldbalanceOrg', 'newbalanceOrig',
                    'diffOrig', 'estNewDest', 'flagOldZero', 'flagNewZero'
                ])

                prediction = model.predict(input_data)[0]
                result = "FRAUDULENT ‚ùå" if prediction == 1 else "LEGIT ‚úÖ"
                st.success(f"Prediction: {result}")

                record = {
                    "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "Amount": amount,
                    "Type": tx_type,
                    "Old Balance": old_balance,
                    "New Balance": new_balance,
                    "Prediction": result
                }

                st.session_state.predicted_transactions.append(record)

                log_df = pd.DataFrame([record])
                log_df.to_csv("permanent_log.csv", mode='a', header=not os.path.exists("permanent_log.csv"), index=False)

            except Exception as e:
                st.error(f"Prediction failed: {e}")
    else:
        st.warning("‚ö†Ô∏è Please upload a model to use prediction features.")

# ---------------------------- Monitor Transactions ----------------------------
elif section == "üì¨ Upload & Monitor":
    st.subheader("üì¨ Monitored Transactions")
    if st.session_state.predicted_transactions:
        df_logs = pd.DataFrame(st.session_state.predicted_transactions)
        st.dataframe(df_logs)

        st.download_button("‚¨áÔ∏è Download CSV Report", df_logs.to_csv(index=False), "fraud_report.csv", "text/csv")

        if st.button("üìÑ Generate PDF Fraud Report"):
            generate_pdf_report(df_logs)
            with open("fraud_report.pdf", "rb") as file:
                st.download_button("‚¨áÔ∏è Download PDF", file.read(), "fraud_report.pdf", mime="application/pdf")
    else:
        st.info("No transactions yet.")

# ---------------------------- Permanent Log Page ----------------------------
elif section == "üìÅ All Logs":
    st.subheader("üìÅ Permanent Log ‚Äì All Transactions")
    try:
        logs = pd.read_csv("permanent_log.csv")
        st.dataframe(logs)
        st.download_button("‚¨áÔ∏è Download All Logs", logs.to_csv(index=False), "permanent_log.csv", "text/csv")
    except FileNotFoundError:
        st.info("No permanent log found.")

# ---------------------------- Reports & Analytics ----------------------------
elif section == "üìä Reports":
    st.subheader("üìä Model Evaluation & Fraud Insights")

    if not model or "uploaded_csv_path" not in st.session_state:
        st.error("‚ùå Please upload both model and dataset first.")
        st.stop()

    try:
        df = pd.read_csv(st.session_state["uploaded_csv_path"])
        df = df[df["type"].isin(["TRANSFER", "CASH_OUT"])]
        df["type"] = df["type"].map({"TRANSFER": 0, "CASH_OUT": 1})
        df = df.drop(columns=[col for col in ["nameOrig", "nameDest", "isFlaggedFraud", "step"] if col in df.columns], errors="ignore")

        # Add engineered features
        df["diffOrig"] = df["oldbalanceOrg"] - df["amount"]
        df["estNewDest"] = df["newbalanceOrig"] + df["amount"]
        df["flagOldZero"] = (df["oldbalanceOrg"] == 0).astype(int)
        df["flagNewZero"] = (df["newbalanceOrig"] == 0).astype(int)

        if "isFraud" not in df.columns:
            st.warning("‚ùå Dataset missing target column 'isFraud'.")
            st.stop()

        features = ['type', 'amount', 'oldbalanceOrg', 'newbalanceOrig',
                    'diffOrig', 'estNewDest', 'flagOldZero', 'flagNewZero']
        X = df[features]
        y = df["isFraud"]

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        y_pred = model.predict(X_test)

        # Confusion Matrix
        st.markdown("### üìå Confusion Matrix")
        fig, ax = plt.subplots()
        sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d", cmap="Blues",
                    xticklabels=["Legit", "Fraud"], yticklabels=["Legit", "Fraud"])
        st.pyplot(fig)

        # Classification Report
        st.markdown("### üìÑ Classification Report")
        st.dataframe(pd.DataFrame(classification_report(y_test, y_pred, output_dict=True)).transpose())

        # Correlation Heatmap
        st.markdown("### üî• Feature Correlation")
        fig2, ax2 = plt.subplots(figsize=(10, 6))
        sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f", ax=ax2)
        st.pyplot(fig2)

        # Amount Distribution
        st.markdown("### üìà Transaction Amount Distribution")
        fig3, ax3 = plt.subplots(figsize=(10, 5))
        sns.histplot(df[df['isFraud'] == 0]['amount'], bins=60, color='green', label='Legit', ax=ax3)
        sns.histplot(df[df['isFraud'] == 1]['amount'], bins=60, color='red', label='Fraud', ax=ax3)
        ax3.set_xlim(0, 200000)
        ax3.legend()
        st.pyplot(fig3)

        # Balance Drop Boxplot
        st.markdown("### üìâ Balance Drop (Fraud vs Legit)")
        df["balanceDiff"] = df["oldbalanceOrg"] - df["newbalanceOrig"]
        fig4, ax4 = plt.subplots()
        sns.boxplot(x="isFraud", y="balanceDiff", data=df, palette=["green", "red"], ax=ax4)
        st.pyplot(fig4)

    except Exception as e:
        st.warning("‚ö†Ô∏è Could not generate analytics.")
        st.text(str(e))

