import streamlit as st
import pandas as pd
import numpy as np
import joblib
from datetime import datetime
from fpdf import FPDF
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import os

# THIS MUST BE FIRST Streamlit command
st.set_page_config(page_title="AI Fraud Detection ‚Äì Kareem Morad", layout="wide")
st.markdown("""
    <style>
    /* Entire page background */
    body, .main {
        background: radial-gradient(circle at top left, #0a0f1f, #000000) no-repeat center center fixed;
        background-size: cover;
        color: white;
    }

    /* Headings and titles */
    h1, h2, h3, .stMarkdown, .stTitle, .stHeader, .css-10trblm {
        color: #6cc3ff !important;
        text-shadow: 0 0 10px #6cc3ff;
    }

    /* Sidebar dark styling */
    section[data-testid="stSidebar"] {
        background-color: #0d1117 !important;
        border-right: 1px solid #333;
        color: white !important;
    }

    /* Sidebar radio buttons */
    .stRadio > div {
        color: white !important;
    }

    /* Buttons */
    .stButton>button {
        background-color: #0f62fe;
        color: white;
        border: none;
        border-radius: 8px;
        box-shadow: 0 0 8px #6cc3ff;
        transition: 0.3s ease-in-out;
    }
    .stButton>button:hover {
        background-color: #0043ce;
        box-shadow: 0 0 12px #6cc3ff;
        transform: scale(1.02);
    }

    /* Inputs and dropdowns */
    .stSelectbox, .stNumberInput, .stTextInput, .stTextArea {
        background-color: #1c1f26 !important;
        color: #ffffff !important;
        border-radius: 6px !important;
        border: 1px solid #333 !important;
    }

    /* Dataframes and boxes */
    .stDataFrame, .stAlert, .stFileUploader {
        background-color: rgba(18, 20, 26, 0.85) !important;
        border-radius: 12px;
        padding: 10px;
        color: white !important;
    }

    /* Sidebar upload text */
    .stFileUploader label {
        color: white !important;
    }

    footer, header {
        visibility: hidden;
    }
    </style>
""", unsafe_allow_html=True)








# UPLOAD MODEL (.pkl)
uploaded_model = st.sidebar.file_uploader("üì§ Upload Trained Model (.pkl)", type="pkl")
model = None
if uploaded_model:
    with open("xgb_model.pkl", "wb") as f:
        f.write(uploaded_model.read())
    model = joblib.load("xgb_model.pkl")
    st.session_state["model"] = model
    st.sidebar.success("‚úÖ Model uploaded successfully.")

# UPLOAD DATASET (.csv)
uploaded_dataset = st.sidebar.file_uploader("üì§ Upload Dataset (.csv)", type="csv", key="csv")
if uploaded_dataset:
    with open("uploaded_data.csv", "wb") as f:
        f.write(uploaded_dataset.read())
    st.session_state["uploaded_csv_path"] = "uploaded_data.csv"
    st.sidebar.success("‚úÖ Dataset uploaded successfully.")

# SESSION STATE
if "predicted_transactions" not in st.session_state:
    st.session_state.predicted_transactions = []

def generate_pdf_report(df):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.set_title("Fraud Detection Report ‚Äì Kareem Morad")

    # Avoid emojis and special characters
    pdf.cell(200, 10, txt="Fraud Detection Report", ln=True, align='C')
    pdf.ln(10)

    total = len(df)
    frauds = df[df["Prediction"].str.contains("FRAUD")]
    fraud_count = len(frauds)

    pdf.cell(200, 10, txt=f"Total Transactions: {total}", ln=True)
    pdf.cell(200, 10, txt=f"Fraudulent Transactions: {fraud_count}", ln=True)
    pdf.ln(5)
    pdf.set_font("Arial", size=10)

    for _, row in frauds.iterrows():
        # Replace unsupported characters to avoid Unicode error
        line = f"{row['Timestamp']} | {row['Type']} | {row['Amount']} | FRAUD"
        pdf.cell(200, 8, txt=line.encode('latin-1', 'replace').decode('latin-1'), ln=True)

    pdf.cell(200, 10, txt="Generated by Kareem Morad", ln=True, align='C')
    pdf.output("fraud_report.pdf")


# NAVIGATION
section = st.sidebar.radio("Go to", ["üè† Overview", "üîç Predict", "üì¨ Upload & Monitor", "üìÅ All Logs", "üìä Reports"])

# OVERVIEW
if section == "üè† Overview":
    st.subheader("üìÑ Project Overview")
    st.write("""
    This dashboard showcases an AI-powered fraud detection model built and trained by Kareem Morad.

    üí° Features:
    - Uploadable .pkl model & .csv dataset
    - Real-time transaction classification
    - Fraud reports (PDF + CSV)
    - Full analytics and correlation insights
    """)

# PREDICT
# -------------------------------------
# PREDICT
# -------------------------------------
# -------------------------------------
elif section == "üîç Predict":
    st.subheader("‚ö° Real-Time Transaction Prediction")

    if model:
        amount = st.number_input("Transaction Amount", value=5000.0)
        tx_type = st.selectbox("Transaction Type", ["TRANSFER", "CASH_OUT", "PAYMENT", "CASH_IN", "DEBIT"])
        old_balance = st.number_input("Old Balance (Origin)", value=10000.0)
        new_balance = st.number_input("New Balance (Origin)", value=500.0)

        # Compute additional required features
        diff_orig = old_balance - amount
        est_new_dest = new_balance + amount
        flag_old_zero = int(old_balance == 0)
        flag_new_zero = int(new_balance == 0)

        if st.button("üîç Predict"):
            try:
                type_map = {"TRANSFER": 0, "CASH_OUT": 1, "PAYMENT": 2, "CASH_IN": 3, "DEBIT": 4}
                input_data = pd.DataFrame([[
                    type_map[tx_type], amount, old_balance, new_balance,
                    diff_orig, est_new_dest, flag_old_zero, flag_new_zero
                ]], columns=[
                    'type', 'amount', 'oldbalanceOrg', 'newbalanceOrig',
                    'diffOrig', 'estNewDest', 'flagOldZero', 'flagNewZero'
                ])

                prediction = model.predict(input_data)[0]
                result = "FRAUDULENT ‚ùå" if prediction == 1 else "LEGIT ‚úÖ"
                st.success(f"Prediction: {result}")

                record = {
                    "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "Amount": amount,
                    "Type": tx_type,
                    "Old Balance": old_balance,
                    "New Balance": new_balance,
                    "Prediction": result
                }

                st.session_state.predicted_transactions.append(record)

                try:
                    log_df = pd.DataFrame([record])
                    log_df.to_csv("permanent_log.csv", mode='a', header=not os.path.exists("permanent_log.csv"), index=False)
                except Exception:
                    pass

            except Exception as e:
                st.error(f"Prediction failed: {e}")
    else:
        st.warning("‚ö†Ô∏è Please upload a trained model to start predictions.")


# MONITOR
elif section == "üì¨ Upload & Monitor":
    st.subheader("üì¨ Monitored Transactions")
    if st.session_state.predicted_transactions:
        df_logs = pd.DataFrame(st.session_state.predicted_transactions)
        st.dataframe(df_logs)

        st.download_button("‚¨áÔ∏è Download CSV Report", df_logs.to_csv(index=False), "fraud_report.csv", "text/csv")

        if st.button("üìÑ Generate PDF Fraud Report"):
            generate_pdf_report(df_logs)
            with open("fraud_report.pdf", "rb") as file:
                st.download_button("‚¨áÔ∏è Download PDF", file.read(), "fraud_report.pdf", mime="application/pdf")
    else:
        st.info("No transactions yet.")

# LOGS
elif section == "üìÅ All Logs":
    st.subheader("üìÅ Permanent Log ‚Äì All Transactions")
    try:
        logs = pd.read_csv("permanent_log.csv")
        st.dataframe(logs)
        st.download_button("‚¨áÔ∏è Download All Logs", logs.to_csv(index=False), "permanent_log.csv", "text/csv")
    except FileNotFoundError:
        st.info("No log file found yet.")

# -------------------------------------
# REPORTS TAB
# -------------------------------------
elif section == "üìä Reports":
    st.subheader("üìä Model Evaluation & Fraud Insights")

    if not model or not uploaded_dataset:
        st.error("‚ùå Model or dataset not found. Please upload both a .pkl and a .csv file to view analytics.")
        st.stop()

    try:
        df = pd.read_csv("uploaded_data.csv")

        # Optional: Filter types
        if "type" in df.columns:
            df = df[df["type"].isin(["TRANSFER", "CASH_OUT"])]
            df["type"] = df["type"].map({"TRANSFER": 0, "CASH_OUT": 1})

        # Drop optional columns if they exist
        drop_cols = ["nameOrig", "nameDest", "isFlaggedFraud", "step"]
        df = df.drop(columns=[col for col in drop_cols if col in df.columns], errors="ignore")

        # Add engineered features to match model input
        df["diffOrig"] = df["oldbalanceOrg"] - df["amount"]
        df["estNewDest"] = df["newbalanceOrig"] + df["amount"]
        df["flagOldZero"] = (df["oldbalanceOrg"] == 0).astype(int)
        df["flagNewZero"] = (df["newbalanceOrig"] == 0).astype(int)

        # Final features expected by model
        required = ['type', 'amount', 'oldbalanceOrg', 'newbalanceOrig',
                    'diffOrig', 'estNewDest', 'flagOldZero', 'flagNewZero', 'isFraud']
        if not all(col in df.columns for col in required):
            st.warning("‚ö†Ô∏è Dataset is missing one or more required columns.")
            st.stop()

        features = ['type', 'amount', 'oldbalanceOrg', 'newbalanceOrig',
                    'diffOrig', 'estNewDest', 'flagOldZero', 'flagNewZero']
        X = df[features]
        y = df["isFraud"]

        # Split for evaluation
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        y_pred = model.predict(X_test)

        # Confusion Matrix
        st.markdown("### üìå Confusion Matrix")
        cm = confusion_matrix(y_test, y_pred)
        fig, ax = plt.subplots()
        sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Legit", "Fraud"], yticklabels=["Legit", "Fraud"])
        st.pyplot(fig)

        # Classification Report
        st.markdown("### üìÑ Classification Report")
        report_df = pd.DataFrame(classification_report(y_test, y_pred, output_dict=True)).transpose()
        st.dataframe(report_df)

        # Correlation Heatmap
        st.markdown("### üî• Feature Correlation")
        fig2, ax2 = plt.subplots(figsize=(10, 6))
        sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f", ax=ax2)
        st.pyplot(fig2)

        # Transaction Amount Distribution
        st.markdown("### üìà Transaction Amount Distribution")
        fig3, ax3 = plt.subplots(figsize=(10, 5))
        sns.histplot(df[df['isFraud'] == 0]['amount'], bins=60, color='green', label='Legit', ax=ax3)
        sns.histplot(df[df['isFraud'] == 1]['amount'], bins=60, color='red', label='Fraud', ax=ax3)
        ax3.set_xlim(0, 200000)
        ax3.set_title("Fraud vs Legit Transactions")
        ax3.legend()
        st.pyplot(fig3)

        # Balance Drop Boxplot
        st.markdown("### üìâ Balance Drop (Fraud vs Legit)")
        df["balanceDiff"] = df["oldbalanceOrg"] - df["newbalanceOrig"]
        fig4, ax4 = plt.subplots()
        sns.boxplot(x="isFraud", y="balanceDiff", data=df, palette=["green", "red"], ax=ax4)
        ax4.set_title("Balance Difference Boxplot")
        st.pyplot(fig4)

    except Exception as e:
        st.warning("‚ö†Ô∏è Could not generate analytics.")
        st.text(str(e))
